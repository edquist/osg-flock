#!/bin/bash
#
# This script probes a system for properties useful for OSGVO and
# friends. This particular script runs "inside" Singularity, in
# the same environment as user jobs.
#
# To be able to support both
# integration with GlideinWMS and HTCondor startd cron, argv1 is used
# to determine what mode we are in. If argv1 points to a glidein_config
# file, GlideinWMS mode is assumed. If argv1 is "NONE", HTCondor startd
# cron mode is assumed.
#
# More information:
#    http://www.uscms.org/SoftwareComputing/Grid/WMS/glideinWMS/doc.prd/factory/custom_scripts.html
#    http://research.cs.wisc.edu/htcondor/manual/v8.2/4_4Hooks.html
#
# Example HTCondor startd cron entry:
#
# STARTD_CRON_JOBLIST = $(STARTD_CRON_JOBLIST) osgvo
# STARTD_CRON_osgvo_EXECUTABLE = /opt/osgvo/osgvo-node-advertise
# STARTD_CRON_osgvo_PERIOD = 30m
# STARTD_CRON_osgvo_MODE = periodic
# STARTD_CRON_osgvo_RECONFIG = true
# STARTD_CRON_osgvo_KILL = true
# STARTD_CRON_osgvo_ARGS = NONE

#######################################################################
#
# Configuration
#

#######################################################################


glidein_config="$1"

function info {
    echo "INFO  " $@ 1>&2
}

function my_warn {
    echo "WARN  " $@ 1>&2
}

function advertise {
    # atype is the type of the value as defined by GlideinWMS:
    #   I - integer
    #   S - quoted string
    #   C - unquoted string (i.e. Condor keyword or expression)
    key="$1"
    value="$2"
    atype="$3"

    if [ "$glidein_config" != "NONE" ]; then
        add_config_line_safe $key "$value"
        add_condor_vars_line $key "$atype" "-" "+" "Y" "Y" "+"
    fi

    if [ "$atype" = "S" ]; then
        echo "$key = \"$value\""
    else
        echo "$key = $value"
    fi
}

function get_glidein_config_value {
    # extracts a config attribute value from 
    # $1 is the attribute key
    CF=$glidein_config
    if [ "$glidein_config" = "NONE" ]; then
        CF="$PWD/glidein_config"
    fi
    KEY="$1"
    VALUE=`(cat $CF | grep "^$KEY " | tail -n 1 | sed "s/^$KEY //") 2>/dev/null`
    echo "$VALUE"
}

#############################################################################
#
# Some tests are too heavy-weight to run every
# 5 minutes. Such test can drop a file named $TEST_FILE_1H.NNNNNNN
# in cwd. These files will be cleaned up after 60 minutes and allow the
# test to rerun then again. There is also a 3 hour version.
#

TEST_FILE_1H=osgvo.test-results.1h
TEST_FILE_4H=osgvo.test-results.4h

# clean up old ones
find . -maxdepth 1 -name $TEST_FILE_1H.\* -mmin +60 -exec rm {} \;
find . -maxdepth 1 -name $TEST_FILE_4H.\* -mmin +240 -exec rm {} \;
find . -maxdepth 1 -name adv-singularity-work.\* -mmin +240 -exec rm -rf {} \;

info "This is a setup script for the OSG-FLOCK frontend."
info "In case of problems, contact Mats Rynge (rynge@isi.edu)"
info "Running in directory $PWD"
    
if [ -e glidein_config ]; then
    # gwms 
    info "GWMS directory detected. Staying in $PWD"
elif [ -e ../glidein_config ]; then
    # gwms stupid tmp dir for periodic scripts - this breaks
    # out ability to cache results
    cd ../
    info "GWMS tmp directory detected. Switched directory to $PWD"
else
    # find a good directory for our tests - we need something that we
    # can re-enter later to pick up cached results
    for DER in $GLIDEIN_Tmp_Dir $TMP $TMPDIR /tmp . ; do
        # do we have write permissions
        if touch $DER/.writetest.$$ >/dev/null 2>&1; then
            rm -f $DER/.writetest.$$
            if mkdir -p $DER/osgvo-node-advertise.work >/dev/null 2>&1; then
                cp $0 $DER/osgvo-node-advertise.work/
                if [ -e add_config_line.source ]; then
                    cp add_config_line.source $DER/osgvo-node-advertise.work/
                fi
                cd $DER/osgvo-node-advertise.work
                info "Switched working directory to $PWD"
                break
            fi
        fi
    done
fi

# bash can set a default PATH - make sure it is exported
export PATH=$PATH

# some sites do not have PATH set
if [ "x$PATH" = "x" ]; then
    export PATH="/usr/local/bin:/usr/bin:/bin"
    my_warn "PATH is empty, setting it to $PATH"
fi
info "PATH is set to $PATH"

# CVMFS_BASE defaults to /cvmfs but can be overridden in case of for example cvmfsexec
if [ "x$CVMFS_BASE" = "x" ]; then
    CVMFS_BASE="/cvmfs"
fi

if [ "x$glidein_config" = "x" ]; then
    glidein_config="NONE"
    info "No arguments provided - assuming HTCondor startd cron mode"
else
    info "Arguments to the script: $@"
fi

if [ "$glidein_config" != "NONE" ]; then
    # full path is problematic as sometimes we are inside a container - however, looks like
    # the file is always in pwd, so use that
    export add_config_line_source=$PWD/add_config_line.source
    export condor_vars_file=$PWD/main/condor_vars.lst

    info "Sourcing $add_config_line_source"
    source $add_config_line_source

    # XXX Patch over add_config_line() with a safer version
    # This will be fixed in gWMS 3.9.6
    add_config_line() {
        # Ignore the call if the exact config line is already in there
        if ! grep -q "^${*}$" "${glidein_config}"; then
            # Use temporary files to make sure multiple add_config_line() calls don't clobber
            # the glidein_config.
            local r="$(head -c16 /dev/urandom | base64 -w0 - | tr / _)"
            local tmp_config1="${glidein_config}.$r.1"
            local tmp_config2="${glidein_config}.$r.2"

            # Copy the glidein config so it doesn't get modified while we grep out the old value
            if ! cp -p "${glidein_config}" "${tmp_config1}"; then
                warn "Error writing ${tmp_config1}"
                rm -f "${tmp_config1}"
                exit 1
            fi
            grep -v "^$1 " "${tmp_config1}" > "${tmp_config2}"
            rm -f "${tmp_config1}"
            if [ ! -f "${tmp_config2}" ]; then
                warn "Error creating ${tmp_config2}"
                exit 1
            fi
            # NOTE that parameters are flattened if not quoted, if there are blanks they are separated by single space
            echo "$@" >> "${tmp_config2}"

            # Replace glidein config atomically
            if ! mv -f "${tmp_config2}" "${glidein_config}"; then
                warn "Error updating ${glidein_config} from ${tmp_config2}"
                rm -f "${tmp_config2}"
                exit 1
            fi
        fi
    }
    # XXX End add_config_line() patch
fi

# timeout - need this early as we use it in some commands later
HAS_TIMEOUT="False"
TIMEOUT_CMD=""
if /usr/bin/timeout --version >/dev/null 2>&1; then
    HAS_TIMEOUT="True"
    export TIMEOUT_CMD="/usr/bin/timeout 60"
fi
advertise HAS_TIMEOUT "$HAS_TIMEOUT" "C"

# operating system

# /etc/issue works most of the time, but there are exceptions
OS_NAME=$(cat /etc/issue | head -n1 | awk '{print $1;}' | tr '[:lower:]' '[:upper:]')

if [ "x$OS_NAME" = "xUBUNTU" ]; then
    OS_VERSION=$(cat /etc/issue | head -n1 | grep -o -E ' [0-9]+.[0-9]+')
elif [ -e /etc/debian_version ]; then
    OS_NAME="DEBIAN"
    OS_VERSION=`cat /etc/debian_version`
elif [ "X$OS_NAME" = "xFEDORA" ]; then
    OS_VERSION=`cat /etc/issue | head -n1 | awk '{print $3;}'`
elif [ -e /etc/redhat-release ]; then
    OS_NAME="RHEL"
    OS_VERSION=`cat /etc/redhat-release | grep -o -E ' [0-9]+'`
elif [ -e /etc/rocks-release ]; then
    OS_NAME="RHEL"
    OS_VERSION=`cat /etc/rocks-release | grep -o -E ' [0-9]+.[0-9]+'`
elif [ -e /etc/SuSE-release ]; then
    OS_NAME="SUSE"
    OS_VERSION=`cat /etc/SuSE-release | grep VERSION | grep -o -E ' [0-9]+'`
fi

# remove spaces/tabs in the version
OS_VERSION=`echo $OS_VERSION | sed 's/[ \t]//g'`

# remove / in the version
OS_VERSION=`echo $OS_VERSION | sed 's/\//_/g'`

# we only want major version numbers
OS_VERSION=`echo $OS_VERSION | sed 's/[\.-].*//'`

if [ "x$OS_NAME" = "x" ]; then
    OS_NAME="Unknown"
fi
if [ "x$OS_VERSION" = "x" ]; then
    OS_VERSION="0"
fi

# kernel
OS_KERNEL=`uname -r`
if [ "x$OS_KERNEL" = "x" ]; then
    OS_KERNEL="Unknown"
fi

advertise OSG_OS_NAME "$OS_NAME" "S"
advertise OSG_OS_VERSION "$OS_VERSION" "S"
advertise OSG_OS_STRING "$OS_NAME $OS_VERSION" "S"
advertise OSG_OS_KERNEL "$OS_KERNEL" "S"

# deprecated names
advertise OSGVO_OS_NAME "$OS_NAME" "S"
advertise OSGVO_OS_VERSION "$OS_VERSION" "S"
advertise OSGVO_OS_STRING "$OS_NAME $OS_VERSION" "S"
advertise OSGVO_OS_KERNEL "$OS_KERNEL" "S"

# cpu info
CPU_MODEL=`cat /proc/cpuinfo | grep -i "^model name" | head -n 1 | sed -r 's/[a-zA-Z \t]+:[ ]*//'`
advertise OSG_CPU_MODEL "$CPU_MODEL" "S"
advertise OSGVO_CPU_MODEL "$CPU_MODEL" "S"

# some cpu flags HTCondor is not yet advertising
for FLAG in `cat /proc/cpuinfo | egrep -i ^flags | head -n 1 | sed -r 's/[a-zA-Z \t]+:[ ]*//'`; do
    if (echo "$FLAG" | egrep "avx512|cx16|f16c") >/dev/null 2>&1; then
        advertise HAS_$FLAG "True" "C"
    fi
done

# if we are in Singularity, override HTCondor's OsSys* vars with the
# default container details
if [ "x$SINGULARITY_COMMAND" != "x" ]; then
    # RHEL is CentOS in HTCondor
    if [ "x$OS_NAME" = "xRHEL" ]; then
        OS_NAME="CentOS"
    fi
    advertise OpSysLongName "Singularity Container - $OS_NAME $OS_VERSION" "S"
    advertise OpSysAndVer "${OS_NAME}${OS_VERSION}" "S"
    advertise OpSysName "$OS_NAME" "S"
    advertise OpSysShortName "$OS_NAME" "S"
    advertise OpSysMajorVer "$OS_VERSION" "I"
    advertise OpSysVer "${OS_VERSION}00" "I"
fi

##################
# ulimits

ULIMIT_STACK_SIZE=`(ulimit -s) 2>/dev/null`
if [ "x$ULIMIT_STACK_SIZE" != "x" ]; then
    if [ "X$ULIMIT_STACK_SIZE" = "Xunlimited" ]; then
        ULIMIT_STACK_SIZE=-1
    fi
    advertise ULIMIT_STACK_SIZE "$ULIMIT_STACK_SIZE" "C"
fi

##################
# stash
if (cat /stash/user/test.osgconnect.1M) >/dev/null 2>&1; then
    # ok, we can access stash, but is it ro or rw?
    if (mount | grep " /stash" | grep ro) >/dev/null 2>&1; then
        advertise StashReadOnly "True" "C"
    else
        advertise StashReadWrite "True" "C"
    fi
fi

# advertise the version of stashcp found in $PATH
if STASHCP_VERSION=$(stashcp --version)
then
    STASHCP_VERSION=$(echo "$STASHCP_VERSION" | head -n1 | grep -o "[0-9][0-9.]\+")
    advertise STASHCP_VERSION "$STASHCP_VERSION" "S"
else
    # version check failed; we don't actually have a working stashcp
    advertise STASHCP_VERSION UNDEFINED "C"
    advertise STASHCP_VERIFIED "False" "C"
fi

##################
# cms software

info "Checking for CMS software..."
OSGVO_CMSSW_Path=""
if [ -r "$OSG_APP/cmssoft/cms/cmsset_default.sh" ]
then
    OSGVO_CMSSW_Path="$OSG_APP/cmssoft/cms/"
elif [ -r $VO_CMS_SW_DIR/cmsset_default.sh ]
then
    OSGVO_CMSSW_Path="$VO_CMS_SW_DIR/"
fi
if [ "x$OSGVO_CMSSW_Path" != "x" ]
then
    advertise OSGVO_CMSSW_Path "$OSGVO_CMSSW_Path" "S"
fi

OSGVO_CMSSW_Revision=""
if [ "x$OSGVO_CMSSW_Path" != "x" -a -r "$OSGVO_CMSSW_Path/etc/cms-common/revision" ]
then
    OSGVO_CMSSW_Revision=$(head -c 10 "$OSGVO_CMSSW_Path/etc/cms-common/revision")
fi
if [ "x$OSGVO_CMSSW_Revision" != "x" ]
then
    advertise OSGVO_CMSSW_Revision "$OSGVO_CMSSW_Revision - $OSGVO_CMSSW_Path/etc/cms-common/revision" "S"
fi


# modules
RESULT="False"
find . -maxdepth 1 -name $TEST_FILE_1H.modules -mmin +8 -exec rm {} \;
if [ -e $TEST_FILE_1H.modules ]; then
    RESULT=`cat $TEST_FILE_1H.modules`
else
   # extra check to make sure we can read a file
   if cat "$CVMFS_BASE"/oasis.opensciencegrid.org/osg/README.txt >/dev/null 2>&1; then
      if cat "$CVMFS_BASE"/connect.opensciencegrid.org/modules/spack/bin/spack >/dev/null 2>&1; then
          if (. "$CVMFS_BASE"/oasis.opensciencegrid.org/osg/sw/module-init.sh && module avail) >/dev/null 2>&1; then
              # also make sure module avail is not throwing a stack trace
              if ! (. "$CVMFS_BASE"/oasis.opensciencegrid.org/osg/sw/module-init.sh && module avail 2>&1 | grep traceback) >/dev/null 2>&1; then
                  RESULT="True"
                  echo "True" > $TEST_FILE_1H.modules
              else
                  echo "False" > $TEST_FILE_1H.modules
              fi
          fi
      fi
   fi
fi
advertise HAS_MODULES "$RESULT && HAS_CVMFS_oasis_opensciencegrid_org && HAS_CVMFS_connect_opensciencegrid_org" "C"


##################
# Java - rely on HTCondor detection

advertise HAS_JAVA "HasJava" "C"


##################
# basic tools

for TOOL in \
    scp \
    rsync \
    zip \
    tcsh \
    unzip \
; do
    if which $TOOL >/dev/null 2>&1; then
        advertise HAS_$TOOL "True" "C"
    else
        advertise HAS_$TOOL "False" "C"
    fi
done

##################
# gfal

# this is a one-shot test - this no longer works due to gwms delegating to 1024 bit
# keys which are not accepted by EL8 hosts
#GFAL_VERIFIED="False"
#if [ -e $TEST_FILE_4H.gfal ]; then
#    GFAL_VERIFIED=`cat $TEST_FILE_4H.gfal`
#elif $TIMEOUT_CMD gfal-copy -t 10 -f gsiftp://workflow.isi.edu/dev/null file:///dev/null >/dev/null 2>&1; then
#    GFAL_VERIFIED="True"
#    echo "True" > $TEST_FILE_4H.gfal
#else
#    echo "False" > $TEST_FILE_4H.gfal
#fi
#advertise GFAL_VERIFIED "$GFAL_VERIFIED" "C"

##################
# guc

GUC_PATH=`which globus-url-copy 2>/dev/null`
if [ "X$GUC_PATH" = "X" ]; then
    GUC_PATH="NA"
fi
advertise GUC_PATH "$GUC_PATH" "S"


##################
# xrdcp

HAS_XRDCP="False"
if xrdcp --version >/dev/null 2>&1; then
    HAS_XRDCP="True"
fi
advertise HAS_XRDCP "$HAS_XRDCP" "C"



##################
# some basic libs
for LIB in \
    /lib64/libgcc_s.so.1 \
    /lib64/libglib-2.0.so.0 \
    /usr/lib64/atlas/libatlas.so.3 \
    /usr/lib64/atlas/liblapack.so.3 \
    /usr/lib64/atlas/libptf77blas.so.3 \
    /usr/lib64/libgfortran.so.3 \
    /usr/lib64/libglib-2.0.so \
    /usr/lib64/libgmp.so.3 \
    /usr/lib64/libgslcblas.so.0 \
    /usr/lib64/libgsl.so.0 \
    /usr/lib64/libgsl.so.0 \
    /usr/lib64/libgtk-x11-2.0.so.0 \
    /usr/lib64/libicuuc.so.42 \
    /usr/lib64/libstdc++.so.6 \
    /usr/lib64/libtk8.5.so \
    /usr/lib64/libxcb.so.1 \
    /usr/lib64/libXdmcp.so.6 \
    /usr/lib64/libXm.so.4 \
    /usr/lib64/libXmu.so.6 \
    /usr/lib64/libXpm.so.4 \
    /usr/lib64/libXt.so.6 \
; do
    ATTR="HAS_FILE"`echo $LIB | sed 's/[\.\/\+\-]/_/g'`
    HAS_LIB="False"
    if [ -e $LIB ]; then
        HAS_LIB="True"
    fi
    advertise $ATTR "$HAS_LIB" "C"
done

# need a better way to figure this one out
if [ -e /usr/share/doc/glib2-2.28.8 ]; then
    advertise HAS_GLIB2_228 "True" "C"
fi


##################
# gcc

HAS_GCC="False"
if gcc --version >/dev/null 2>&1; then
    HAS_GCC="True"
fi
advertise HAS_GCC "$HAS_GCC" "C"

HAS_GPP="False"
if g++ --version >/dev/null 2>&1; then
    HAS_GPP="True"
fi
advertise HAS_GPP "$HAS_GPP" "C"

##################
# R

HAS_R="False"
if R --version >/dev/null 2>&1; then
    HAS_R="True"
    R_VERSION=`(R --version 2>&1 | head -n1 | sed 's/"//g') 2>/dev/null`
    if [ "x$R_VERSION" != "x" ]; then
        advertise R_VERSION "$R_VERSION" "S"
    fi
fi
advertise HAS_R "$HAS_R" "C"


##################
# python/numpy/scipy

info "Checking for Python availability..."
if python --version >/dev/null 2>&1; then
    PYTHON_VERSION=`python --version 2>&1 | sed 's/Python //'`
    if [ "x$PYTHON_VERSION" != "x" ]; then
        advertise PYTHON_VERSION "$PYTHON_VERSION" "S"
    fi
    advertise HAS_PYTHON "True" "C"
fi

info "Checking for numpy/scipy availability..."
cat >py.check <<EOF
from numpy import array
from os.path import exists
from random import seed, shuffle
from scipy.stats import chisquare
from sys import argv
EOF

Has_Numpy_Scipy="False"
if python py.check >/dev/null 2>&1; then
    Has_Numpy_Scipy="True"
fi
advertise HAS_NUMPY "$Has_Numpy_Scipy" "C"
rm -f py.check


##################
# matlab

advertise MATLAB_COMPATIBLE "HAS_MODULES && HAS_FILE_usr_lib64_libXt_so_6" "C"


##################
# Blast

info "Checking for blast availability..."

APP_BASE=$OSG_APP/`whoami`/ncbi-blast-2.2.28+
DATA_BASE=$OSG_DATA/`whoami`/blastdb

HAS_BLAST="False"
if [ -e "$APP_BASE/bin/blastp" -a -e "$DATA_BASE/nr.00.phr" ]; then

    # let's do a specific test to make sure things work
    export BLASTDB=$OSG_DATA/`whoami`/blastdb
    export PATH=$APP_BASE/bin:$PATH
    #echo ">test query" > test.fasta
    #echo "ACGTCCGAGACGCGAGCAGCGAGCAGCAGAGCGACGAGCAGCGACGA" >> test.fasta
    #if (blastp -db nr -query test.fasta) >/dev/null; then
        HAS_BLAST="True"

        # we also want to put the dirs in the environment
        advertise BLAST_INSTALL_DIR "$APP_BASE" "S"

        advertise BLAST_DB_DIR "$DATA_BASE" "S"
    #fi
fi
advertise HAS_BLAST "$HAS_BLAST" "C"


##################
info "All done - time to do some real work!"

